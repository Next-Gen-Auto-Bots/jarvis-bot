name: Python Package using Conda

on: [push, pull_request]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-activate-base: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge,defaults
        channel-priority: flexible
    
    - name: Display conda info
      shell: bash -el {0}
      run: |
        conda info
        conda list
    
    - name: Update conda
      shell: bash -el {0}
      run: |
        conda update -n base -c defaults conda -y
    
    - name: Install dependencies from environment.yml
      shell: bash -el {0}
      run: |
        if [ -f environment.yml ]; then
          echo "Installing dependencies from environment.yml"
          conda env update --file environment.yml --name base
        else
          echo "No environment.yml found, skipping"
        fi
    
    - name: Install dependencies from requirements.txt
      shell: bash -el {0}
      run: |
        if [ -f requirements.txt ]; then
          echo "Installing dependencies from requirements.txt"
          pip install --upgrade pip
          pip install -r requirements.txt
        else
          echo "No requirements.txt found, skipping"
        fi
    
    - name: Install testing and linting packages
      shell: bash -el {0}
      run: |
        conda install -y -c conda-forge pytest pytest-cov flake8
        pip install --upgrade pytest pytest-cov flake8
    
    - name: Lint with flake8
      shell: bash -el {0}
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      shell: bash -el {0}
      run: |
        if [ -d tests ] || [ -d test ]; then
          echo "Running tests with coverage"
          pytest --cov=. --cov-report=xml --cov-report=html --verbose
        else
          echo "No tests directory found, skipping tests"
          echo "Note: Consider adding tests to improve code quality"
        fi
    
    - name: Upload coverage to Codecov
      if: success() && (hashFiles('coverage.xml') != '')
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
